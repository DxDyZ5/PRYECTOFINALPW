let a1 = ""; export function call1(o) { if (null == o) throw Error("arg of cacl1 is not defined"); a1 += o, console.log(o) } export function call2(o) { if (null == o) throw Error("arg of cacl2 is not defined"); a1 += o, console.log(o) } export function show() { console.log(a1) } export function consoleLog(o) { console.log(o) } import { _addPoint as o, _addPointTooltip as e, _addPointCustomSymbology as t, _addPointCustomSymbologyAndTooltip as l, _addPointIcon as a, _addPointIconAndTooltip as n } from "./geometry/point.js"; import { _initializationOfRendering as r, _settingsOfRendering as i, _emptyStreamPointCollection as c, _addPointToCollection as s, _addPointsToCollection as p, _addPointsOnType as d, _clearAllPointsCollection as m, _clearPointsByIdsCollection as f, _movePointFromCollection as g } from "./geometry/points.js"; import { initBasemapLayers as C } from "./layers/basemap.js"; let map = null, layers_control = null, LeafletCore = null, config = { api: { src: "https://unpkg.com/leaflet@1.9.3/dist/leaflet.js", href: "https://unpkg.com/leaflet@1.9.3/dist/leaflet.css" } }; export const MapCoreInitialization = o => { let e = document.createElement("script"); e.src = config.api.src, e.async = !0; let t = document.createElement("link"); t.href = config.api.href, t.rel = "stylesheet", document.body.appendChild(t), document.body.appendChild(e); let l = void 0 === o ? 0 : void 0 === o.location || null === o.location ? 0 : void 0 === o.location.longitude ? 0 : o.location.longitude, a = void 0 === o ? 0 : void 0 === o.location || null === o.location ? 0 : void 0 === o.location.latitude ? 0 : o.location.latitude; e.onload = () => { LeafletCore = L, layers_control = _layers_control(map = L.map(o.__mapid, { doubleClickZoom: !0, shiftBoxZoom: !0, dragging: !0 }).on("load", function (o) { }).setView({ lon: l, lat: a }, o.zoom_level)), console.log(o), null !== layers_control && C(map, !1, o.basemap, layers_control), null !== o.map_scale && void 0 !== o.map_scale.has && !0 === o.map_scale.has && L.control.scale({ metric: o.map_scale.meters, imperial: o.map_scale.miles }).addTo(map) }, e.onerror = () => { console.warn("Error occurred while loading Leaflet script") } }; let _layers_control = o => L.control.layers(null, null, { collapsed: !0 }).addTo(o); export const addPoint = e => { o(e, map, LeafletCore) }; export const addPointTooltip = o => { e(o, map, LeafletCore) }; export const addPointCustomSymbology = o => { t(o, map, LeafletCore) }; export const addPointCustomSymbologyAndTooltip = o => { l(o, map, LeafletCore) }; export const addPointIcon = o => { a(o, map, LeafletCore) }; export const addPointIconAndTooltip = o => { addPointIconAndTooltip(o, map, LeafletCore) }; export const initializationOfRendering = o => { r(o) }; export const settingsOfRendering = o => { i(o) }; export const addPointToStreamCollection = o => { s(o, map, LeafletCore) }; export const addPointsToStreamCollection = o => p(o, !1, map, LeafletCore).length; export const addNewPointsToStreamCollection = o => { p(o, !0, map, LeafletCore) }; export const addPointsOnType = o => { d(o, !1, map, LeafletCore) }; export const addNewCollectionPointsOnType = o => { d(o, !0, map, LeafletCore) }; export const emptyStreamPointCollection = () => { c() }; export const clearAllStreamCollection = () => { m(map) }; export const clearPointsByIdsStreamCollection = o => { console.log("_clearPointsByIdsCollection"), f(o, map), console.log("_clearPointsByIdsCollection") }; export const movePointFromStreamCollection = o => { g(o, map, LeafletCore) }; export const setExtent = o => { let e = LeafletCore.latLng(o.latmin, o.lngmin), t = LeafletCore.latLng(o.latmax, o.lngmax), l = L.latLngBounds(e, t); map.fitBounds(l) };