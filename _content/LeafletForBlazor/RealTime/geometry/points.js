let streamPointCollection = [], _renderType = "circleMarker", _classAppearanceByAttributes = [], _defaultCircleMarker = { radius: 15, color: "#22ffff", weight: 4, fillColor: "#28ffff", opacity: .75 }; export const _initializationOfRendering = e => { _renderType = e }; export const _settingsOfRendering = e => { let t = _classAppearanceByAttributes.map(e => e.guid); _classAppearanceByAttributes = [..._classAppearanceByAttributes = _classAppearanceByAttributes.filter(e => -1 === t.indexOf(e.guid)), ...e], streamPointCollection.forEach(e => { let t = _classAppearanceByAttributes.filter(t => t.guid === e.guid), o = streamPointCollection.filter(t => t.guid === e.guid); 0 !== o.length && 0 !== t.length && o[0].marker.setStyle(t[0].symbol) }) }; export const _emptyStreamPointCollection = () => { streamPointCollection = [] }; export const _addPointToCollection = (e, t, o) => { if (!_pointValidateAndMessages(e)) return; let i = new o.marker([e.latitude, e.longitude], { opacity: 1 }), r = { guid: e.guid, marker: i, type: e.type, value: e.value }; streamPointCollection.push(r), i.addTo(t) }; let layersGroup = []; export const _addPointsToCollection = (e, t, o, i) => { if (t && (streamPointCollection = [], layersGroup = []), !Array.isArray(e)) throw console.warm("is not Array points"), Error("is not Array points"); if (!_pointsValidateAndMessages(e)) throw console.warm("point(s) in Array is/are not valid"), Error("point(s) in Array is/are not valid"); let r = e.map(e => { let t = {}; if ("circleMarker" === _renderType) { let o = _classAppearanceByAttributes.filter(t => t.guid === e.guid); t = new i.circleMarker([e.latitude, e.longitude], 0 !== o.length ? o[0].symbol : _defaultCircleMarker) } else if ("marker" === _renderType) { t = new i.marker([e.latitude, e.longitude], { opacity: 1 }); let r = L.icon({ iconUrl: `http://localhost:5141/${e.type}.png`, iconAnchor: [16, 16] }); t.setIcon(r) } return { guid: e.guid, marker: t, type: e.type, value: e.value } }); streamPointCollection = [...streamPointCollection, ...r]; let n = i.layerGroup(streamPointCollection.map(e => e.marker)); return layersGroup.push(n), n.addTo(o), streamPointCollection }; export const _addPointsOnType = (e, t, o, i) => { if (t && (streamPointCollection = [], layersGroup = []), !Array.isArray(e)) throw console.warm("is not Array points"), Error("is not Array points"); if (!_pointsValidateAndMessages(e)) throw console.warm("point(s) in Array is/are not valid"), Error("point(s) in Array is/are not valid"); streamPointCollection = [...streamPointCollection, ...e.map(e => { let t = new i.marker([e.latitude, e.longitude], { opacity: 1 }); return { guid: e.guid, marker: t, type: e.type, value: e.value } })]; let r = i.layerGroup(streamPointCollection.map(e => e.marker)); layersGroup.push(r), r.addTo(o) }; export const _clearAllPointsCollection = e => { for (let t of layersGroup) e.removeLayer(t); streamPointCollection = [] }; export const _clearPointsByIdsCollection = (e, t) => { let o = streamPointCollection.filter(t => -1 !== e.indexOf(t.guid)), i = streamPointCollection.filter(t => -1 === e.indexOf(t.guid)); o.forEach(e => { t.removeLayer(e.marker) }), streamPointCollection = i }; export const _removePoints = (e, t) => { }; export const _removeType = (e, t) => { }; export const _movePointFromCollection = (e, t, o) => { if (!_pointValidateAndMessages(e)) return; e.guid; let i = streamPointCollection.filter(t => t.guid === e.guid); if (1 === i.length) { let r = i[0].marker, n = i[0].type, l = i[0].value; (e.type !== n || e.value !== l) && console.warn("You cannot change type and/or value using the moveTo method, sorry!"); var a = o.latLng(e.latitude, e.longitude); r.setLatLng(a) } else if (0 === i.length) throw console.warn("id(s) does not exist in the Geometric.Points collection"), Error("id(s) does not exist in the Geometric.Points collection"); else throw console.warn("Duplicated in the collection of points of Geometric.Points"), Error("Duplicated in the collection of points of Geometric.Points") }; let _pointValidateAndMessages = e => { let t = !0; if (null == e) throw console.warm("Point is not valid"), Error("Point is not valid"); if (void 0 === e.latitude || null === e.latitude) throw console.warm("latiude value is not valid"), Error("latiude value is not valid"); if (void 0 === e.longitude || null === e.longitude) throw console.warm("longitude value is not valid"), Error("longitude value is not valid"); if ("number" != typeof e.latitude || "number" != typeof e.longitude) throw console.warm("longitude and/or latitude value is not a number"), Error("longitude and/or latitude value is not a number"); return t }, _pointsValidateAndMessages = e => { let t = !0; for (let o of e) if (!_pointValidateAndMessages(o)) return !1; return t };