function _init_leaflet_linear_measurement() { L.Control.LinearMeasurement = L.Control.extend({ options: { position: "topleft", unitSystem: "imperial", color: "#4D90FE", contrastingColor: "#fff", show_last_node: !1, show_azimut: !1 }, clickSpeed: 200, onAdd: function (t) { var i = L.DomUtil.create("div", "leaflet-control leaflet-bar"), s = L.DomUtil.create("a", "icon-ruler", i), a = t.getContainer(), o = this; s.href = "#", s.title = "Toggle measurement tool", L.DomEvent.on(s, "click", L.DomEvent.stop).on(s, "click", function () { L.DomUtil.hasClass(s, "icon-active") ? (o.resetRuler(!!o.mainLayer), L.DomUtil.removeClass(s, "icon-active"), L.DomUtil.removeClass(a, "ruler-map")) : (o.initRuler(), L.DomUtil.addClass(s, "icon-active"), L.DomUtil.addClass(a, "ruler-map")) }), this.options.color && -1 === this.options.color.indexOf("#") ? this.options.color = "#" + this.options.color : this.options.color || (this.options.color = "#4D90FE"); var e, n, l, r = this.options.color.replace("#", ""); return this.options.contrastingColor = "#" + ((n = e = r, l = "string" == typeof n ? function t(i) { if (3 === i.length) i = i.charAt(0) + i.charAt(0) + i.charAt(1) + i.charAt(1) + i.charAt(2) + i.charAt(2); else if (6 !== i.length) throw "Invalid hex color: " + i; for (var s = [], a = 0; a <= 2; a++)s[a] = parseInt(i.substr(2 * a, 2), 16); return s }(n) : n, .2126 * l[0] + .7152 * l[1] + .0722 * l[2] >= 165) ? "000" : "fff"), i }, onRemove: function (t) { this.resetRuler(!!this.mainLayer) }, initRuler: function () { var t = this, i = this._map; this.mainLayer = L.featureGroup(), this.mainLayer.addTo(this._map), i.touchZoom.disable(), i.doubleClickZoom.disable(), i.boxZoom.disable(), i.keyboard.disable(), i.tap && i.tap.disable(), this.dblClickEventFn = function (t) { L.DomEvent.stop(t) }, this.clickEventFn = function (i) { t.clickHandle ? (clearTimeout(t.clickHandle), t.clickHandle = 0, t.options.show_last_node && (t.preClick(i), t.getMouseClickHandler(i)), t.getDblClickHandler(i)) : (t.preClick(i), t.clickHandle = setTimeout(function () { t.getMouseClickHandler(i), t.clickHandle = 0 }, t.clickSpeed)) }, this.moveEventFn = function (i) { t.clickHandle || t.getMouseMoveHandler(i) }, i.on("click", this.clickEventFn, this), i.on("mousemove", this.moveEventFn, this), this.resetRuler() }, initLayer: function () { this.layer = L.featureGroup(), this.layer.addTo(this.mainLayer), this.layer.on("selected", this.layerSelected), this.layer.on("click", this.clickEventFn, this) }, resetRuler: function (t) { var i = this._map; t && (i.off("click", this.clickEventFn, this), i.off("mousemove", this.moveEventFn, this), this.mainLayer && this._map.removeLayer(this.mainLayer), this.mainLayer = null, this._map.touchZoom.enable(), this._map.boxZoom.enable(), this._map.keyboard.enable(), this._map.tap && this._map.tap.enable()), this.layer = null, this.prevLatlng = null, this.poly = null, this.multi = null, this.latlngs = null, this.latlngsList = [], this.sum = 0, this.distance = 0, this.separation = 1, this.last = 0, this.fixedLast = 0, this.totalIcon = null, this.total = null, this.lastCircle = null, this.UNIT_CONV = 1e3, this.SUB_UNIT_CONV = 1e3, this.UNIT = "km", this.SUB_UNIT = "m", "imperial" === this.options.unitSystem && (this.UNIT_CONV = 1609.344, this.SUB_UNIT_CONV = 5280, this.UNIT = "mi", this.SUB_UNIT = "ft"), this.measure = { scalar: 0, unit: this.SUB_UNIT } }, cleanUpMarkers: function (t) { var i = this.layer; i && i.eachLayer(function (s) { s.options && "tmp" === s.options.type && (t ? s.options.type = "fixed" : i.removeLayer(s)) }) }, cleanUpFixed: function () { var t = this.layer; t && t.eachLayer(function (i) { i.options && "fixed" === i.options.type && t.removeLayer(i) }) }, convertDots: function () { var t = this, i = this.layer; i && i.eachLayer(function (i) { if (i.options && "dot" === i.options.type) { var s = i.options.marker, a = s ? s.options.icon.options : null, o = a ? a.html : ""; if (o && -1 === o.indexOf(t.measure.unit)) { var e = i.options.label.split(" "), n = parseFloat(e[0]), l = e[1], r = ""; -1 !== i.options.label.indexOf(t.measure.unit) ? r = i.options.label : l === t.UNIT ? r = (n * t.SUB_UNIT_CONV).toFixed(2) + " " + t.SUB_UNIT : l === t.SUB_UNIT && (r = (n / t.SUB_UNIT_CONV).toFixed(2) + " " + t.UNIT); var h = L.divIcon({ className: "total-popup-label", html: r }); s.setIcon(h) } } }) }, displayMarkers: function (t, i, s) { var a, o, e, n, l, r = t[t.length - 1], h = t[0], c = h.distanceTo(r) / this.UNIT_CONV, p = c, u = this._map.latLngToContainerPoint(r), m = this._map.latLngToContainerPoint(h), d = 1; this.measure.unit === this.SUB_UNIT && (p *= d = this.SUB_UNIT_CONV); for (var v = s * d + p, f = s * d, y = Math.floor(f); y < v; y++)n = (v - y) / p, !(y % this.separation) && !(y < f) && (a = u.x - n * (u.x - m.x), o = u.y - n * (u.y - m.y), l = L.point(a, o), r = this._map.containerPointToLatLng(l), e = y + " " + this.measure.unit, this.renderCircle(r, 0, this.layer, i ? "fixed" : "tmp", e), this.last = v); return c }, renderCircle: function (t, i, s, a, o) { var e = this.options.color, n = this.options.color, l = "", r = ""; a = a || "circle"; var h = { color: n, fillOpacity: 1, opacity: 1, fill: !0, type: a }, c = this.prevLatlng ? this._map.latLngToContainerPoint(this.prevLatlng) : null, p = this._map.latLngToContainerPoint(t); "dot" === a && (r = "node-label", c && this.options.show_azimut && (l = ' <span class="azimut"> ' + this.lastAzimut + "&deg;</span>")); let u = this._map.containerPointToLatLng(p); if (o) { var m = L.divIcon({ className: "total-popup-label " + r, html: '<span style="color: ' + e + ';">' + o + l + "</span>" }); h.icon = m, h.marker = L.marker(u, { icon: m, type: a }).addTo(s), h.label = o } var d = L.circleMarker(t, h); return d.setRadius(3), d.addTo(s), d }, getAzimut: function (t, i) { var s = 0; return t && i && ((s = parseInt(180 * Math.atan2(i.y - t.y, i.x - t.x) / Math.PI)) > 0 ? s += 90 : s < 0 && (s = (s = Math.abs(s)) <= 90 ? 90 - s : 360 - (s - 90))), this.lastAzimut = s, s }, renderPolyline: function (t, i, s) { var a = L.polyline(t, { color: this.options.color, weight: 2, opacity: 1, dashArray: i }); return a.addTo(s), a }, renderMultiPolyline: function (t, i, s) { var a; return (a = L.version.startsWith("0") ? L.multiPolyline(t, { color: this.options.color, weight: 2, opacity: 1, dashArray: i }) : L.polyline(t, { color: this.options.color, weight: 2, opacity: 1, dashArray: i })).addTo(s), a }, formatDistance: function (t, i) { var s; return { scalar: L.Util.formatNum(t < 1 ? t * parseFloat(this.SUB_UNIT_CONV) : t, i), unit: t < 1 ? this.SUB_UNIT : this.UNIT } }, hasClass: function (t, i) { var s = L.DomUtil.hasClass; for (var a in i) if (s(t, i[a])) return !0; return !1 }, preClick: function (t) { var i = this, s = t.originalEvent.target; !this.hasClass(s, ["leaflet-popup", "total-popup-content"]) && (i.layer || i.initLayer(), i.cleanUpMarkers(!0), i.fixedLast = i.last, i.prevLatlng = t.latlng, i.sum = 0) }, getMouseClickHandler: function (t) { var i, s, a = this; for (var o in a.fixedLast = a.last, a.sum = 0, a.poly && (a.latlngsList.push(a.latlngs), a.multi ? a.multi.setLatLngs(a.latlngsList) : a.multi = a.renderMultiPolyline(a.latlngsList, "5 5", a.layer, "dot")), a.latlngsList) i = a.latlngsList[o], a.sum += i[0].distanceTo(i[1]) / a.UNIT_CONV; var e = (s = a.measure.unit === this.SUB_UNIT ? a.sum * a.SUB_UNIT_CONV : a.sum).toFixed(2); a.renderCircle(t.latlng, 0, a.layer, "dot", parseInt(e) ? e + " " + a.measure.unit : ""), a.prevLatlng = t.latlng }, getMouseMoveHandler: function (t) { var i = ""; if (this.prevLatlng) { var s = t.latlng; this.latlngs = [this.prevLatlng, t.latlng], this.poly ? this.poly.setLatLngs(this.latlngs) : this.poly = this.renderPolyline(this.latlngs, "5 5", this.layer), this.distance = parseFloat(this.prevLatlng.distanceTo(t.latlng)) / this.UNIT_CONV, this.measure = this.formatDistance(this.distance + this.sum, 2); var a = this.prevLatlng ? this._map.latLngToContainerPoint(this.prevLatlng) : null, o = this._map.latLngToContainerPoint(s); a && this.options.show_azimut && (i = ' <span class="azimut azimut-final" style="color: ' + this.options.contrastingColor + ';"> &nbsp; ' + this.getAzimut(a, o) + "&deg;</span>"); var e = this.measure.scalar + " " + this.measure.unit, n = '<span class="total-popup-content" style="background-color:' + this.options.color + "; color: " + this.options.contrastingColor + '">' + e + i + "</span>"; this.total ? (this.totalIcon = L.divIcon({ className: "total-popup", html: n }), this.total.setLatLng(t.latlng), this.total.setIcon(this.totalIcon)) : (this.totalIcon = L.divIcon({ className: "total-popup", html: n }), this.total = L.marker(t.latlng, { icon: this.totalIcon, clickable: !0 }).addTo(this.layer)); var l = this.measure.scalar, r = this.separation, h = Math.pow(10, parseInt(l).toString().length), c = 0; if (this.separation = l > h / 2 ? h / 10 : h / 20, r !== this.separation && this.fixedLast) { this.cleanUpMarkers(), this.cleanUpFixed(); var p = this.multi.getLatLngs(); for (var u in p) c += this.displayMarkers.apply(this, [p[u], !0, c]); this.displayMarkers.apply(this, [this.poly.getLatLngs(), !1, this.sum]), this.convertDots() } else this.cleanUpMarkers(), this.displayMarkers.apply(this, [this.poly.getLatLngs(), !1, this.sum]) } }, getDblClickHandler: function (t) { var i = "", s = this; if (this.total) { this.layer.off("click"), L.DomEvent.stop(t), this.options.show_azimut && (i = ' <span class="azimut azimut-final" style="color: ' + this.options.contrastingColor + ';"> &nbsp; ' + this.lastAzimut + "&deg;</span>"); var a = this.layer, o = this.measure.scalar + " " + this.measure.unit + " ", e = (this.measure.unit === this.SUB_UNIT ? this.measure.scalar / this.UNIT_CONV : this.measure.scalar, this.total.getLatLng(), this.total), n = ['<div class="total-popup-content" style="background-color:' + this.options.color + "; color: " + this.options.contrastingColor + '">' + o + i, '  <svg class="close" viewbox="0 0 45 35">', '   <path style="stroke: ' + this.options.contrastingColor + '" class="close" d="M 10,10 L 30,30 M 30,10 L 10,30" />', "  </svg>", "</div>"].join(""); this.totalIcon = L.divIcon({ className: "total-popup", html: n }), this.total.setIcon(this.totalIcon); var l = { total: this.measure, total_label: e, unit: this.UNIT_CONV, sub_unit: this.SUB_UNIT_CONV }, r = function (t) { L.DomUtil.hasClass(t.originalEvent.target, "close") ? s.mainLayer.removeLayer(a) : a.fireEvent("selected", l) }; a.on("click", r), a.fireEvent("selected", l), this.resetRuler(!1) } }, purgeLayers: function (t) { for (var i in t) t[i] && this.layer.removeLayer(t[i]) }, layerSelected: function (t) { } }) } export { _init_leaflet_linear_measurement };