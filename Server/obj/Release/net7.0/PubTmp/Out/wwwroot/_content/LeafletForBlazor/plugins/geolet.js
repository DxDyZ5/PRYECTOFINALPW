function _init_geolet() { var t = "[GEOLET] ", o = window.L; if (!o || !o.map) { console.error(t + "Missing Leaflet"); return } var e = function (t, o) { if ("object" != typeof o || null === o) return t; for (let i in ("object" != typeof t || null === t) && (t = {}), o) ({}).hasOwnProperty.call(o, i) && ("object" == typeof o[i] && null !== o[i] && Object.getPrototypeOf(o[i]) == Object.getPrototypeOf({}) ? t[i] = e(t[i], o[i]) : t[i] = o[i]); return t }; o.Geolet = o.Control.extend({ options: { title: "Find current location", className: null, activeClassName: null, style: { display: "flex", color: "" }, activeStyle: { display: "flex", color: "#E00" }, html: '<svg width="16" height="16" viewport="0 0 16 16" style="margin:auto auto"><circle cx="8" cy="8" r="7" style="fill:none;stroke:currentColor;stroke-width:2px"/><circle cx="8" cy="8" r="4" style="fill:currentColor"/></svg>', geoOptions: { enableHighAccuracy: !0, maximumAge: 3e4, timeout: 27e3 }, marker: null, popup: null, popupContent: null, updatePopupWhenOpen: !0, autoPan: !0, minZoom: 9 }, _a: null, _map: null, _watchId: null, _latLng: null, _popupContent: null, _first: !1, marker: null, popup: null, initialize: function (t) { "object" == typeof t && null !== t && o.setOptions(this, t) }, isActive: function () { return !!this._watchId }, getLatLng: function () { return this.isActive() ? this._latLng : null }, updatePopup: function () { var t; this._popup && (void 0 === this.options.popupContent || null === this.options.popupContent ? t = "<b>" + o.Geolet.formatLatLng(this.getLatLng()) + "</b>" : "function" == typeof this.options.popupContent ? t = this.options.popupContent.call(this, this.getLatLng()) : this.options.popupContent && (t = this.options.popupContent), null !== t && this._popup.setContent(t)) }, activate: function () { if (o.Geolet.browserSupport) { this.styleAnchor(!0); var e = this, i = function (t) { var i = !!e._first; e._latLng = o.latLng(t.coords.latitude, t.coords.longitude, t.coords.altitude), e._popupContent = e.options.popupContent, e._popup && e._popup.isOpen() && e.options.updatePopupWhenOpen && e.updatePopup(), e._marker && (e._marker.setLatLng(e._latLng), e._marker.addTo(e._map)), e._first && (e._first = !1, e.options.autoPan && e._map.setView(e._latLng, e.options.minZoom ? Math.max(e._map.getZoom(), e.options.minZoom) : e._map.getZoom())), e._map.fire("geolet_success", { control: e, first: i, marker: e._marker, latlng: e._latLng, raw: t }) }, n = function (o) { e.deactivate(), console.warn(t + o.message), e._map.fire("geolet_error", { control: e, raw: o }) }; this._first = !0, this._watchId = navigator.geolocation.watchPosition(i, n, this.options.geoOptions) } }, deactivate: function () { this.styleAnchor(!1), this.isActive() && (navigator.geolocation.clearWatch(this._watchId), this._watchId = null), this._latLng = null, this._marker && this._marker.remove(), this._popup && this._popup.remove() }, styleAnchor: function (t) { var o = []; this._a && (this.options.className && o.push(this.options.className), t && this.options.activeClassName && o.push(this.options.activeClassName), o.length ? this._a.className = o.join(" ") : this._a.className = "", t && this.options.activeStyle && e(this._a.style, this.options.activeStyle), !t && this.options.style && e(this._a.style, this.options.style)) }, onAdd: function (e) { var i = this, n = o.DomUtil.create("div"); return (this._map = e, o.Geolet.browserSupport) ? ((this._marker && this._marker.remove(), "function" == typeof this.options.marker) ? this._marker = this.options.marker.call(this, e) : this.options.marker ? this._marker = this.options.marker : void 0 === this.options.marker || null === this.options.marker ? this._marker = o.marker(null, { icon: o.divIcon({ html: '<svg width="20" height="20" viewport="0 0 20 20"><circle cx="10" cy="10" r="10" style="fill:white"/><circle cx="10" cy="10" r="7" style="fill:none;stroke:currentColor;stroke-width:2px"/><circle cx="10" cy="10" r="4" style="fill:currentColor"/></svg>', iconAnchor: [10, 10], className: "" }), attribution: '<a href="https://github.com/rhlt/leaflet-geolet" target="_blank">Geolet</a>', zIndexOffset: 1e3 }) : this._marker = null, this._popup && this._popup.remove(), "function" == typeof this.options.popup ? this._popup = this.options.popup.call(this, e) : this.options.popup ? this._popup = this.options.popup : void 0 === this.options.popup || null === this.options.popup ? this._popup = o.popup({ autoPan: this.options.autoPan }) : this._popup = null, this._marker && this._popup && (this._marker.bindPopup(this._popup), this._marker.on("popupopen", function () { i.updatePopup() })), n.className = "leaflet-bar leaflet-control", this._a = document.createElement("a"), this._a.setAttribute("href", "#"), this.options.title && this._a.setAttribute("title", this.options.title), this.styleAnchor(), this._a.addEventListener("click", function (t) { i.isActive() ? i.deactivate() : i.activate(), t.preventDefault(), t.stopPropagation() }), this._a.addEventListener("dblclick", function (t) { t.stopPropagation() }), this.options.html && (this._a.innerHTML = this.options.html), n.appendChild(this._a), n) : (console.warn(t + "Browser does not support Geolocation"), n.style.display = "none", n) }, onRemove: function (t) { this.deactivate(), this._a = null, this._map = null, this._popup = null, this._marker = null } }), o.Geolet.browserSupport = !!(navigator && navigator.geolocation && navigator.geolocation.watchPosition), o.Geolet.formatSymbols = {}, o.Geolet.formatLatLng = function (t, i, n) { if (t = o.latLng(t, i, n)) { var s = [], p = e({ deg: "&deg;", min: "&#8217;", sec: "&#8221;", N: "N", E: "E", S: "S", W: "W", space: " ", comma: ", " }, o.Geolet.formatSymbols); return ["lat", "lng"].forEach(function (o) { var e = "lat" == o ? t[o] < 0 ? p.S : p.N : t[o] < 0 ? p.W : p.E, i = Math.round(3600 * Math.abs(t[o])) / 3600, n = Math.floor(i) + p.deg, l = Math.floor(60 * i) % 60 + p.min, a = Math.floor(3600 * i) % 60 + p.sec; s.push([n, l, a, e].join(p.space)) }), s.join(p.comma) } }, o.geolet = function (t) { return new o.Geolet(t) } } export { _init_geolet };